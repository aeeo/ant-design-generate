import { PlusOutlined } from '@ant-design/icons';
import { Button, Divider, message } from 'antd';
import React, { useState, useRef } from 'react';
import { PageContainer, FooterToolbar } from '@ant-design/pro-layout';
import ProTable, { ProColumns, ActionType } from '@ant-design/pro-table';
import ModalForm from './components/ModalForm';
import { <%= moduleName %>Item } from './data.d';
import { query<%= moduleName %>, update<%= moduleName %>, add<%= moduleName %>, remove<%= moduleName %> } from './service';

export enum modalTypeEnum {
  'Create' = 0,
  'Update' = 1,
}

/**
 * 添加节点
 * @param fields
 */
const handleAdd = async (fields: <%= moduleName %>Item) => {
  const hide = message.loading('正在添加');
  try {
    await add<%= moduleName %>({ ...fields });
    hide();
    message.success('添加成功');
    return true;
  } catch (error) {
    hide();
    message.error('添加失败请重试！');
    return false;
  }
};

/**
 * 更新节点
 * @param fields
 */
const handleUpdate = async (fields: <%= moduleName %>Item) => {
  const hide = message.loading('正在配置');
  try {
    await update<%= moduleName %>({...fields, id: row?.id});
    hide();
    message.success('配置成功');
    return true;
  } catch (error) {
    hide();
    message.error('配置失败请重试！');
    return false;
  }
};

/**
 *  删除节点
 * @param selectedRows
 */
const handleRemove = async (selectedRows: <%= moduleName %>Item[]) => {
  const hide = message.loading('正在删除');
  if (!selectedRows) return true;
  try {
    await remove<%= moduleName %>({
      id: selectedRows.map((row) => row?.id),
    });
    hide();
    message.success('删除成功，即将刷新');
    return true;
  } catch (error) {
    hide();
    message.error('删除失败，请重试');
    return false;
  }
};

const <%= moduleName %>: React.FC<{}> = () => {
  const [modalVisible, handleModalVisible] = useState<boolean>(false);
  const [modalType, handleModalType] = useState<modalTypeEnum>(modalTypeEnum.Create);
  const actionRef = useRef<ActionType>();
  const [row, setRow] = useState<<%= moduleName %>Item>();
  const [selectedRowsState, setSelectedRows] = useState<<%= moduleName %>Item[]>([]);

  /**
   * 显示弹窗
   */
  const handleShowModal = (modalTypeValue: modalTypeEnum, record?: <%= moduleName %>Item ) => {
    handleModalType(modalTypeValue);
    handleModalVisible(true);
    setRow(record);
  };

   /**
   * Modal弹框的props
   */
  const modalProps = {
    row,
    title: modalType === modalTypeEnum.Create ? '新增' : '修改',
    width: 780,
    footer: null,
    visible: { modalVisible },
    async onOk(values: <%= moduleName %>Item) {
      let success: boolean;
      if(modalType === modalTypeEnum.Create){
        success = await handleAdd(values);
      }else {
        success = await handleUpdate(values);
      }
      if (success) {
        handleModalVisible(false);
        if (actionRef.current) {
          actionRef.current.reload();
        }
      }
    },
    onCancel() {
      handleModalVisible(false);
    },
  };

  const columns: ProColumns<<%= moduleName %>Item>[] = [
  <% columnsData.forEach(function(item){ -%>
  {
      title: "<%= item.title %>",
      dataIndex: "<%= item.dataIndex -%>",
      <%_ if(item.type){ -%>
      valueType: "<%= item.type %>",
      <%_ } -%>
      <%_ if(item.sorter){ -%>
      sorter: <%= item.sorter %>,
      <%_ } -%>
      <%_ if(item.valueEnum){ -%>
      valueEnum: <%- JSON.stringify(item.valueEnum) %>,
      <%_ } -%>
      <%_ if(item.hideInTable){ -%>
      hideInTable: <%= item.hideInTable %>,
      <%_ } -%>
      <%_ if(item.hideInSearch){ -%>
      hideInSearch: <%= item.hideInSearch %>,
      <%_ } -%>
      <%_ if(item.align){ -%>
      align: <%= item.align -%>,
      <%_ } else if(!item.align) { -%>
      align: "center",
      <%_ } -%>
      <%_ if(item.type === 'dateRange' || item.type === 'dateTimeRange' ){ -%>
      search: {
        transform: (value: any) => ({ startTime: value[0], endTime: value[1] }),
      },
      <%_ } -%>
    },
  <% }) -%>
    {
      title: '操作',
      dataIndex: 'option',
      valueType: 'option',
      render: (_, record) => (
        <>
          <a
            onClick={() => {
              handleShowModal(modalTypeEnum.Update, record);
            }}
          >
            修改
          </a>
          <Divider type="vertical" />
          <a href="">查看</a>
        </>
      ),
    },
  ];

  return (
    <PageContainer>
      <ProTable<<%= moduleName %>Item>
        headerTitle="查询表格"
        actionRef={actionRef}
        rowKey="id"
        search={{
          labelWidth: 120,
        }}
        toolBarRender={() => [
          <Button type="primary" onClick={() => handleShowModal(modalTypeEnum.Create)}>
            <PlusOutlined /> 新建
          </Button>,
        ]}
        request={async (params, sorter, filter) => {
          const data = await query<%= moduleName %>({ ...params, sorter, filter });
          return {
            data: data?.data?.records || [],
            total: data?.data?.total || 0,
          };
        }}
        columns={columns}
        rowSelection={{
          onChange: (_, selectedRows) => setSelectedRows(selectedRows),
        }}
      />
      {selectedRowsState?.length > 0 && (
        <FooterToolbar
          extra={
            <div>
              已选择 <a style={{ fontWeight: 600 }}>{selectedRowsState.length}</a> 项&nbsp;&nbsp;
              <span>
                服务调用次数总计 {selectedRowsState.reduce((pre, item) => pre + item.callNo, 0)} 万
              </span>
            </div>
          }
        >
          <Button
            onClick={async () => {
              await handleRemove(selectedRowsState);
              setSelectedRows([]);
              actionRef.current?.reloadAndRest?.();
            }}
          >
            批量删除
          </Button>
          <Button type="primary">批量审批</Button>
        </FooterToolbar>
      )}
      {modalVisible && <ModalForm {...modalProps} />}
    </PageContainer>
  );
};

export default <%= moduleName %>;
